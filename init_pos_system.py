#!/usr/bin/env python3
"""
Script de inicializaci√≥n integrado para ScanPay POS
Combina el frontend modular con el sistema de gesti√≥n avanzado
"""

import subprocess
import sys
import os
import time
import requests
from pathlib import Path

class POSSystemInitializer:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.manage_script = self.base_dir / "manage.py"
        self.pos_frontend = self.base_dir / "pos_modular.html"
        
    def check_dependencies(self):
        """Verificar dependencias del sistema"""
        print("üîç Verificando dependencias...")
        
        # Verificar Python
        print(f"‚úÖ Python: {sys.version}")
        
        # Verificar manage.py
        if not self.manage_script.exists():
            print("‚ùå manage.py no encontrado")
            return False
        
        # Verificar frontend modular
        if not self.pos_frontend.exists():
            print("‚ùå Frontend modular no encontrado")
            return False
            
        print("‚úÖ Todas las dependencias est√°n disponibles")
        return True
    
    def start_pos_server(self):
        """Iniciar el servidor POS usando manage.py"""
        print("üöÄ Iniciando servidor POS...")
        
        try:
            result = subprocess.run([
                sys.executable, 
                str(self.manage_script), 
                "start"
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("‚úÖ Servidor POS iniciado exitosamente")
                print(result.stdout)
                return True
            else:
                print("‚ùå Error iniciando servidor POS:")
                print(result.stderr)
                return False
                
        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout iniciando servidor POS")
            return False
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            return False
    
    def wait_for_server(self, max_attempts=10):
        """Esperar a que el servidor est√© disponible"""
        print("‚è≥ Esperando que el servidor est√© listo...")
        
        for attempt in range(max_attempts):
            try:
                response = requests.get("http://localhost:3002/health", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Servidor POS est√° respondiendo")
                    return True
            except requests.exceptions.RequestException:
                if attempt < max_attempts - 1:
                    print(f"‚è≥ Intento {attempt + 1}/{max_attempts} - Esperando...")
                    time.sleep(3)
                else:
                    print("‚ùå Servidor no responde despu√©s de varios intentos")
        
        return False
    
    def open_frontend(self):
        """Abrir el frontend modular"""
        print("üåê Abriendo frontend POS...")
        
        try:
            if os.name == 'nt':  # Windows
                os.startfile(str(self.pos_frontend))
            elif os.name == 'posix':  # macOS/Linux
                subprocess.run(['open' if sys.platform == 'darwin' else 'xdg-open', 
                              str(self.pos_frontend)])
            
            print("‚úÖ Frontend abierto en navegador")
            return True
            
        except Exception as e:
            print(f"‚ùå Error abriendo frontend: {e}")
            return False
    
    def show_system_status(self):
        """Mostrar estado del sistema"""
        print("\n" + "="*50)
        print("üìä ESTADO DEL SISTEMA SCANPAY POS")
        print("="*50)
        
        # Estado del servidor
        try:
            result = subprocess.run([
                sys.executable, 
                str(self.manage_script), 
                "status"
            ], capture_output=True, text=True)
            print(result.stdout)
        except Exception as e:
            print(f"‚ùå Error obteniendo estado: {e}")
        
        # URLs disponibles
        print("\nüîó URLs del sistema:")
        print("   ‚Ä¢ Servidor POS: http://localhost:3002")
        print("   ‚Ä¢ API Principal: http://localhost:8001")
        print("   ‚Ä¢ Frontend Modular: file://" + str(self.pos_frontend.absolute()))
        
        print("\nüí° Funcionalidades integradas:")
        print("   ‚úÖ Autenticaci√≥n y sesiones")
        print("   ‚úÖ Esc√°ner de c√≥digos avanzado")
        print("   ‚úÖ Facturaci√≥n electr√≥nica")
        print("   ‚úÖ Gesti√≥n de inventario")
        print("   ‚úÖ Sistema de pagos robusto")
        print("   ‚úÖ Modo offline/standalone")
        
        print("\nüéÆ Controles disponibles:")
        print("   ‚Ä¢ python manage.py start   - Iniciar servicios")
        print("   ‚Ä¢ python manage.py stop    - Detener servicios")  
        print("   ‚Ä¢ python manage.py status  - Ver estado")
        print("   ‚Ä¢ python manage.py restart - Reiniciar servicios")
        
        print("="*50)
    
    def run(self):
        """Ejecutar inicializaci√≥n completa"""
        print("üöÄ INICIALIZANDO SISTEMA SCANPAY POS")
        print("="*40)
        
        # Verificar dependencias
        if not self.check_dependencies():
            print("‚ùå Faltan dependencias. Abortando.")
            return False
        
        # Iniciar servidor
        if not self.start_pos_server():
            print("‚ùå No se pudo iniciar el servidor. Abortando.")
            return False
        
        # Esperar servidor
        if not self.wait_for_server():
            print("‚ö†Ô∏è El servidor puede no estar completamente listo.")
        
        # Abrir frontend
        self.open_frontend()
        
        # Mostrar estado
        time.sleep(2)
        self.show_system_status()
        
        print("\nüéâ ¬°Sistema iniciado exitosamente!")
        print("üëÄ El frontend deber√≠a estar abierto en tu navegador")
        print("üîß Usa 'python manage.py stop' para detener el sistema")
        
        return True

def main():
    """Funci√≥n principal"""
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "stop":
            print("üõë Deteniendo sistema POS...")
            manage_path = Path(__file__).parent / "manage.py"
            subprocess.run([sys.executable, str(manage_path), "stop"])
            return
        elif command == "status":
            print("üìä Estado del sistema POS...")
            manage_path = Path(__file__).parent / "manage.py"
            subprocess.run([sys.executable, str(manage_path), "status"])
            return
    
    # Inicializaci√≥n completa
    initializer = POSSystemInitializer()
    success = initializer.run()
    
    if not success:
        print("\n‚ùå La inicializaci√≥n fall√≥.")
        sys.exit(1)

if __name__ == "__main__":
    main()